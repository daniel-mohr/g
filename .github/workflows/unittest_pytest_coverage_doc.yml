# https://docs.github.com/en/actions/learn-github-actions/introduction-to-github-actions
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
# https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners

# todo:
# https://docs.github.com/en/actions/guides/building-and-testing-python
# https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows

name: unittest_pytest_coverage_doc

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  pep8_check:
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu1804-README.md
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: install dependencies for PEP 8 code style check (ubuntu packages)
      run: sudo apt install pep8 pylint3
    - name: check PEP 8 code style
      run: pep8 --show-source --show-pep8 --statistics $(find -name "*.py")
    - name: run pylint (only output; skipping error)
      run: pylint -j 3 --include-naming-hint=y --good-names=i,j,k,fd $(find -name "*.py")
      continue-on-error: true
  
  ubuntu-1804_test_doc:
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu1804-README.md
    runs-on: ubuntu-18.04
    needs: pep8_check
    steps:
    - uses: actions/checkout@v2
    - name: check environment
      run: lsb_release -a
    - name: check python version
      run: env python3 -V
    - name: install dependencies (ubuntu packages)
      run: sudo apt install python3-setuptools python3-wheel python3-jsonschema python3-netcdf4 libudunits2-0
    - name: install dependencies (cfchecker via pip)
      run: pip3 install cfchecker
    - name: check all modules available
      run: env python3 setup.py check_modules
    - name: install pydabu
      run: pip3 install .
    - name: run pydabu
      run: |
        which pydabu
        pydabu
    - name: run json_schema_from_schema_org
      run: |
        which json_schema_from_schema_org
        json_schema_from_schema_org -h
    - name: unittest
      run: env python3 setup.py run_unittest
    - name: install dependencies for pytest (ubuntu packages)
      run: sudo apt install python3-pytest python3-pytest-cov python3-pytest-xdist
    - name: pytest
      run: env python3 setup.py run_pytest --parallel --coverage
    - name: install dependencies for documentation (ubuntu packages)
      run: sudo apt install python3-sphinx python3-sphinx-argparse python3-recommonmark latexmk texlive-latex-recommended texlive-fonts-recommended texlive-latex-extra
    - name: install dependencies for documentation (sphinx-jsonschema via pip)
      run: pip3 install sphinx-jsonschema
    - name: build doc
      run: ./create_doc
    - name: adapt doc fo jekyll
      if: ${{ github.event_name == 'push' }}
      run: touch manual_pydabu_html/.nojekyll
    - name: deploy pages
      if: ${{ github.event_name == 'push' }}
      uses: JamesIves/github-pages-deploy-action@4.1.4
      with:
        branch: documentation
        folder: manual_pydabu_html

  ubuntu-2004_test_doc:
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
#    runs-on: ubuntu-latest
    runs-on: ubuntu-20.04
    needs: pep8_check
    steps:
    - uses: actions/checkout@v2
    - name: check environment
      run: lsb_release -a
    - name: check python version
      run: env python3 -V
    - name: install dependencies (ubuntu packages)
      run: sudo apt install python3-setuptools python3-wheel python3-jsonschema python3-netcdf4 libudunits2-0
    - name: install dependencies (cfchecker via pip)
      run: pip3 install cfchecker
    - name: check all modules available
      run: env python3 setup.py check_modules
    - name: install pydabu
      run: pip3 install .
    - name: run pydabu
      run: |
        which pydabu
        pydabu
    - name: run json_schema_from_schema_org
      run: |
        which json_schema_from_schema_org
        json_schema_from_schema_org -h
    - name: unittest
      run: env python3 setup.py run_unittest
    - name: install dependencies for pytest (ubuntu packages)
      run: sudo apt install python3-pytest python3-pytest-cov python3-pytest-xdist
    - name: pytest
      run: env python3 setup.py run_pytest --parallel --coverage
    - name: install dependencies for documentation (ubuntu packages)
      run: sudo apt install python3-sphinx python3-sphinx-argparse python3-recommonmark latexmk texlive-latex-recommended texlive-fonts-recommended texlive-latex-extra
    - name: install dependencies for documentation (sphinx-jsonschema via pip)
      run: pip3 install sphinx-jsonschema
    - name: build doc
      run: ./create_doc

  macos-1015_test:
    # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md
    runs-on: macos-10.15
    needs: pep8_check
    steps:
    - uses: actions/checkout@v2
    #- name: search packages (via Homebrew)
    #  run: brew search udunits
    - name: install dependencies (via Homebrew)
      run: brew install udunits
    - name: install dependencies via pip3
      run: pip3 install wheel jsonschema netCDF4 pytest pytest-cov pytest-xdist cfchecker
    #- name: install dependencies for documentation via pip3
    #  run: pip3 install Sphinx sphinx-argparse recommonmark sphinx-jsonschema
    - name: check all modules available
      run: env python3 setup.py check_modules
    - name: install pydabu
      run: pip3 install .
    - name: run pydabu
      run: |
        which pydabu
        pydabu
    - name: run json_schema_from_schema_org
      run: |
        which json_schema_from_schema_org
        json_schema_from_schema_org -h
    - name: unittest
      run: env python3 setup.py run_unittest
    - name: pytest
      run: env python3 setup.py run_pytest --parallel --coverage

  macos-11_test:
    # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11-Readme.md
    if: ${{ false }}
    # https://github.com/actions/virtual-environments/issues/2486
    # https://github.com/actions/virtual-environments/blob/main/docs/macos-11-onboarding.md
    runs-on: macos-11
    needs: pep8_check
    steps:
    - uses: actions/checkout@v2
    #- name: search packages (via Homebrew)
    #  run: brew search udunits
    - name: install dependencies (via Homebrew)
      run: brew install udunits
    - name: install dependencies via pip3
      run: pip3 install wheel jsonschema netCDF4 pytest pytest-cov pytest-xdist cfchecker
    #- name: install dependencies for documentation via pip3
    #  run: pip3 install Sphinx sphinx-argparse recommonmark sphinx-jsonschema
    - name: check all modules available
      run: env python3 setup.py check_modules
    - name: install pydabu
      run: pip3 install .
    - name: run pydabu
      run: |
        which pydabu
        pydabu
    - name: run json_schema_from_schema_org
      run: |
        which json_schema_from_schema_org
        json_schema_from_schema_org -h
    - name: unittest
      run: env python3 setup.py run_unittest
    - name: pytest
      run: env python3 setup.py run_pytest --parallel --coverage

  windows-2016_test:
    # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2016-Readme.md
    runs-on: windows-2016
    needs: pep8_check
    steps:
    - uses: actions/checkout@v2
    - name: check python version
      run: python -V
    # use conda to install python, cfchecker and udunits
    # https://anaconda.org/conda-forge/python
    # https://anaconda.org/conda-forge/cfchecker
    # https://anaconda.org/conda-forge/udunits
    - name: conda init powershell
      run: |
        &($env:CONDA + "\Scripts\conda") init powershell
    - name: install dependencies via conda
      run: conda install -c conda-forge python jsonschema netcdf4 cfchecker pytest pytest-cov pytest-xdist
      # sphinx sphinx-argparse recommonmark latexmk ...
    - name: set conda environment for cfunits
      run: conda env config vars set UDUNITS2_XML_PATH=$env:CONDA"\Library\share\udunits\udunits2.xml"
    - name: check python and pip version (from conda)
      run: |
        Get-Command python
        python -V
        Get-Command pip
        pip -V
    - name: check all modules available
      run: python setup.py check_modules
    - name: install pydabu
      run: pip install --verbose .
    - name: run pydabu
      run: |
        Get-Command pydabu
        pydabu
    - name: run json_schema_from_schema_org
      run: |
        Get-Command json_schema_from_schema_org
        json_schema_from_schema_org -h
    - name: unittest
      run: python setup.py run_unittest
    - name: pytest
      run: python setup.py run_pytest --parallel --coverage

  windows-2019_test:
    # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: windows-2019
    needs: pep8_check
    steps:
    - uses: actions/checkout@v2
    - name: check python version
      run: python -V
    # use conda to install python, cfchecker and udunits
    # https://anaconda.org/conda-forge/python
    # https://anaconda.org/conda-forge/cfchecker
    # https://anaconda.org/conda-forge/udunits
    - name: conda init powershell
      run: |
        &($env:CONDA + "\Scripts\conda") init powershell
    - name: install dependencies via conda
      run: conda install -c conda-forge python jsonschema netcdf4 cfchecker pytest pytest-cov pytest-xdist
      # sphinx sphinx-argparse recommonmark latexmk ...
    - name: set conda environment for cfunits
      run: conda env config vars set UDUNITS2_XML_PATH=$env:CONDA"\Library\share\udunits\udunits2.xml"
    - name: check python and pip version (from conda)
      run: |
        Get-Command python
        python -V
        Get-Command pip
        pip -V
    - name: check all modules available
      run: python setup.py check_modules
    - name: install pydabu
      run: pip install --verbose .
    - name: run pydabu
      run: |
        Get-Command pydabu
        pydabu
    - name: run json_schema_from_schema_org
      run: |
        Get-Command json_schema_from_schema_org
        json_schema_from_schema_org -h
    - name: unittest
      run: python setup.py run_unittest
    - name: pytest
      run: python setup.py run_pytest --parallel --coverage
